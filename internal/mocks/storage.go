// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	storage "github.com/pisarevaa/gophermart/internal/storage"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockStorage) BeginTransaction(ctx context.Context) (storage.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction", ctx)
	ret0, _ := ret[0].(storage.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockStorageMockRecorder) BeginTransaction(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockStorage)(nil).BeginTransaction), ctx)
}

// CloseConnection mocks base method.
func (m *MockStorage) CloseConnection() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection")
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockStorageMockRecorder) CloseConnection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockStorage)(nil).CloseConnection))
}

// GetOrder mocks base method.
func (m *MockStorage) GetOrder(ctx context.Context, number string) (storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, number)
	ret0, _ := ret[0].(storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStorageMockRecorder) GetOrder(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStorage)(nil).GetOrder), ctx, number)
}

// GetOrders mocks base method.
func (m *MockStorage) GetOrders(ctx context.Context, login string, onlyWithdrawn bool) ([]storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, login, onlyWithdrawn)
	ret0, _ := ret[0].([]storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockStorageMockRecorder) GetOrders(ctx, login, onlyWithdrawn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockStorage)(nil).GetOrders), ctx, login, onlyWithdrawn)
}

// GetOrdersCountToUpdate mocks base method.
func (m *MockStorage) GetOrdersCountToUpdate(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersCountToUpdate", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersCountToUpdate indicates an expected call of GetOrdersCountToUpdate.
func (mr *MockStorageMockRecorder) GetOrdersCountToUpdate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersCountToUpdate", reflect.TypeOf((*MockStorage)(nil).GetOrdersCountToUpdate), ctx)
}

// GetUser mocks base method.
func (m *MockStorage) GetUser(ctx context.Context, login string) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, login)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStorageMockRecorder) GetUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStorage)(nil).GetUser), ctx, login)
}

// StoreOrder mocks base method.
func (m *MockStorage) StoreOrder(ctx context.Context, number, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreOrder", ctx, number, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreOrder indicates an expected call of StoreOrder.
func (mr *MockStorageMockRecorder) StoreOrder(ctx, number, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreOrder", reflect.TypeOf((*MockStorage)(nil).StoreOrder), ctx, number, login)
}

// StoreUser mocks base method.
func (m *MockStorage) StoreUser(ctx context.Context, login, passwordHash string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreUser", ctx, login, passwordHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreUser indicates an expected call of StoreUser.
func (mr *MockStorageMockRecorder) StoreUser(ctx, login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreUser", reflect.TypeOf((*MockStorage)(nil).StoreUser), ctx, login, passwordHash)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// AccrualUserBalance mocks base method.
func (m *MockTransaction) AccrualUserBalance(ctx context.Context, accraul float32, login string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccrualUserBalance", ctx, accraul, login)
	ret0, _ := ret[0].(error)
	return ret0
}

// AccrualUserBalance indicates an expected call of AccrualUserBalance.
func (mr *MockTransactionMockRecorder) AccrualUserBalance(ctx, accraul, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccrualUserBalance", reflect.TypeOf((*MockTransaction)(nil).AccrualUserBalance), ctx, accraul, login)
}

// Commit mocks base method.
func (m *MockTransaction) Commit(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit), ctx)
}

// GetOrderToUpdateStatus mocks base method.
func (m *MockTransaction) GetOrderToUpdateStatus(ctx context.Context) (storage.OrderToUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderToUpdateStatus", ctx)
	ret0, _ := ret[0].(storage.OrderToUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderToUpdateStatus indicates an expected call of GetOrderToUpdateStatus.
func (mr *MockTransactionMockRecorder) GetOrderToUpdateStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderToUpdateStatus", reflect.TypeOf((*MockTransaction)(nil).GetOrderToUpdateStatus), ctx)
}

// GetOrderWithLock mocks base method.
func (m *MockTransaction) GetOrderWithLock(ctx context.Context, number, login string) (storage.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderWithLock", ctx, number, login)
	ret0, _ := ret[0].(storage.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderWithLock indicates an expected call of GetOrderWithLock.
func (mr *MockTransactionMockRecorder) GetOrderWithLock(ctx, number, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderWithLock", reflect.TypeOf((*MockTransaction)(nil).GetOrderWithLock), ctx, number, login)
}

// GetUserWithLock mocks base method.
func (m *MockTransaction) GetUserWithLock(ctx context.Context, login string) (storage.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithLock", ctx, login)
	ret0, _ := ret[0].(storage.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithLock indicates an expected call of GetUserWithLock.
func (mr *MockTransactionMockRecorder) GetUserWithLock(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithLock", reflect.TypeOf((*MockTransaction)(nil).GetUserWithLock), ctx, login)
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback), ctx)
}

// UpdateOrderStatus mocks base method.
func (m *MockTransaction) UpdateOrderStatus(ctx context.Context, order storage.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockTransactionMockRecorder) UpdateOrderStatus(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockTransaction)(nil).UpdateOrderStatus), ctx, order)
}

// WithdrawOrderBalance mocks base method.
func (m *MockTransaction) WithdrawOrderBalance(ctx context.Context, number string, withdraw float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawOrderBalance", ctx, number, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawOrderBalance indicates an expected call of WithdrawOrderBalance.
func (mr *MockTransactionMockRecorder) WithdrawOrderBalance(ctx, number, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawOrderBalance", reflect.TypeOf((*MockTransaction)(nil).WithdrawOrderBalance), ctx, number, withdraw)
}

// WithdrawUserBalance mocks base method.
func (m *MockTransaction) WithdrawUserBalance(ctx context.Context, login string, withdraw float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithdrawUserBalance", ctx, login, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithdrawUserBalance indicates an expected call of WithdrawUserBalance.
func (mr *MockTransactionMockRecorder) WithdrawUserBalance(ctx, login, withdraw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithdrawUserBalance", reflect.TypeOf((*MockTransaction)(nil).WithdrawUserBalance), ctx, login, withdraw)
}
